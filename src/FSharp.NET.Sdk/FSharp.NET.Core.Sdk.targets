<!--
***********************************************************************************************
FSharp.NET.Core.Sdk.targets

WARNING:  You CAN MODIFY this file, doesnt matter if you are not knowledgeable about MSBuild and
          without a backup copy.
          Incorrect changes to this file will make it impossible to load or build your projects
          from the command-line or the IDE. 
          Just remove FSharp.NET.Sdk package from nuget cache and re-restore.

This file defines the steps in the standard build process specific for F# .NET projects.
For example, it contains the step that actually calls the F# compiler. 
Flow is: msbuild -> CoreCompile -> dotnet compile-fsc -> fsc
The remainder of the build process is defined in Microsoft.Common.targets, but is not imported by 
this file.

***********************************************************************************************
-->

<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

    <PropertyGroup>
        <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
        <DefaultLanguageSourceExtension>.fs</DefaultLanguageSourceExtension>
        <Language>F#</Language>
        <TargetRuntime>Managed</TargetRuntime>
        <AlwaysUseNumericalSuffixInItemNames>true</AlwaysUseNumericalSuffixInItemNames>
        <DefineCommonItemSchemas Condition=" '$(DefineCommonItemSchemas)' == '' ">true</DefineCommonItemSchemas>
        <DefineCommonReferenceSchemas Condition=" '$(DefineCommonReferenceSchemas)' == '' ">true</DefineCommonReferenceSchemas>
        <DefineCommonCapabilities Condition=" '$(DefineCommonCapabilities)' == '' ">true</DefineCommonCapabilities>
    </PropertyGroup>

    <ItemGroup>
        <DocFileItem Include="$(DocumentationFile)" Condition="'$(DocumentationFile)'!=''"/>
    </ItemGroup>

    <ItemGroup Condition="'$(_DebugSymbolsProduced)' == 'true' and '$(PdbFile)' != ''">
        <_DebugSymbolsIntermediatePathTemporary Include="$(PdbFile)"/>
        <!-- Add any missing .pdb extension, as the compiler does -->
        <_DebugSymbolsIntermediatePath Include="@(_DebugSymbolsIntermediatePathTemporary->'%(RootDir)%(Directory)%(Filename).pdb')"/>
    </ItemGroup>

    <PropertyGroup>
        <CoreCompileDependsOn>_ComputeNonExistentFileProperty</CoreCompileDependsOn>
    </PropertyGroup>
 
    <!-- Locate and add mscorlib, unless NoStdLib is set -->
    <ItemGroup Condition=" '$(NoStdLib)' != 'true' ">
        <_ExplicitReference Include="$(FrameworkPathOverride)\mscorlib.dll" />
    </ItemGroup>

    <!--Required Tasks by .Common.target-->

    <PropertyGroup>
        <CreateManifestResourceNamesDependsOn></CreateManifestResourceNamesDependsOn>
    </PropertyGroup>
    <Target
        Name="CreateManifestResourceNames"
        Condition="'@(EmbeddedResource)' != ''"
        DependsOnTargets="$(CreateManifestResourceNamesDependsOn)"
        >

        <Message Text="Prova CreateManifestResourceNames" />
    </Target>

  <Target
          Name="CoreCompile"
          Inputs="$(MSBuildAllProjects);
                @(Compile);
                @(_CoreCompileResourceInputs);
                $(ApplicationIcon);
                $(AssemblyOriginatorKeyFile);
                @(ReferencePath);
                @(CompiledLicenseFile);
                @(LinkResource);
                @(EmbeddedDocumentation);
                $(Win32Resource);
                $(Win32Manifest);
                @(CustomAdditionalCompileInputs);
                $(ResolvedCodeAnalysisRuleSet);
                @(AdditionalFiles);
                @(EmbeddedFiles)"
          Outputs="@(DocFileItem);
                 @(IntermediateAssembly);
                 @(_DebugSymbolsIntermediatePath);
                 $(NonExistentFile);
                 @(CustomAdditionalCompileOutputs)"
          Returns="@(FscCommandLineArgs)"
          DependsOnTargets="$(CoreCompileDependsOn)"
    >
        <PropertyGroup>
            <_IntermediateOutputPathFull>$([System.IO.Path]::GetFullPath('$(IntermediateOutputPath)'))</_IntermediateOutputPathFull>
            <_TargetFrameworkDefine>$(TargetFramework.Replace('.','_').ToUpper())</_TargetFrameworkDefine>
        </PropertyGroup>

        <!--STEP1 Create the dotnet-compile-fsc response file lines-->
        <ItemGroup>
            <DotnetCompileFscResponseLines Include="--temp-output:$(_IntermediateOutputPathFull)" />
            <DotnetCompileFscResponseLines Include="--out:$(_IntermediateOutputPathFull)$(TargetName)$(TargetExt)" />

            <DotnetCompileFscResponseLines Condition="'$(OutputType)' == 'Exe'"  Include="--emit-entry-point:True" />

            <!--DOC: $(DefineConstants) is a string separated by ';' so let's convert to array-->
            <DefineConstantsArray Include="$(DefineConstants.Split(';'))" />
            <DotnetCompileFscResponseLines Include="@(DefineConstantsArray -> '--define:%(Identity)')" />

            <!--HACK: for compatibility with previous sdk-->
            <DotnetCompileFscResponseLines Include="--define:$(_TargetFrameworkDefine)" />

            <DotnetCompileFscResponseLines Include="--optimize:$(Optimize)" />
            <DotnetCompileFscResponseLines Include="--debug-type:$(DebugType)" />
            <DotnetCompileFscResponseLines Include="--output-name:$(TargetName)" />
            <DotnetCompileFscResponseLines Include="--file-version:1.0.0.0" />
            <DotnetCompileFscResponseLines Include="--version:1.0.0.0" />
            <DotnetCompileFscResponseLines Include="--informational-version:1.0.0" />
            <DotnetCompileFscResponseLines Include="--target-framework:$(NuGetTargetMoniker)" />

            <DotnetCompileFscResponseLines Include="@(ReferencePath -> '--reference:%(FullPath)')" />

            <DotnetCompileFscResponseLines Include="@(Compile)" />
        </ItemGroup>

        <!--STEP2 Create the dotnet-compile-fsc response file-->
        <PropertyGroup>
            <DotnetCompileFscResponseFilePath>$(_IntermediateOutputPathFull)dotnet-compile.rsp</DotnetCompileFscResponseFilePath>
        </PropertyGroup>

        <WriteLinesToFile File="$(DotnetCompileFscResponseFilePath)" Lines="@(DotnetCompileFscResponseLines)" Overwrite="True" />

        <!--STEP3 set dotnet-compile-fsc path and arguments -->
        <ItemGroup>
            <!-- find referenced version of dotnet-compile-fsc -->
            <DotnetCompileFscVersion Include="@(DotNetCliToolReference -> '%(Version)')" />
        </ItemGroup>
        <PropertyGroup>
            <!--HACK the dotnet additionalprobingpath params doesnt like a trailing slash, so trim it -->
            <DotnetCompileFscExecCommand>dotnet exec --depsfile $(NuGetPackageRoot).tools/dotnet-compile-fsc/@(DotnetCompileFscVersion)/netcoreapp1.0/dotnet-compile-fsc.deps.json --additionalprobingpath $(NuGetPackageRoot.TrimEnd('\\').TrimEnd('/')) $(NuGetPackageRoot)dotnet-compile-fsc/@(DotnetCompileFscVersion)/lib/netcoreapp1.0/dotnet-compile-fsc.dll</DotnetCompileFscExecCommand>
        </PropertyGroup>

        <!--STEP4 HACK: invoke dotnet-compile-fsc because already works-->
        <Exec Command="$(DotnetCompileFscExecCommand) @$(DotnetCompileFscResponseFilePath)"/>
    </Target>

    <!--End Required Task by .Common.target-->

    <PropertyGroup Condition="$(MSBuildProjectFullPath.EndsWith('.fsproj')) == 'true' AND '$(PackProjectInputFile)' == ''">
      <PackProjectInputFile>$(MSBuildProjectFullPath)</PackProjectInputFile>
    </PropertyGroup>    

</Project>
