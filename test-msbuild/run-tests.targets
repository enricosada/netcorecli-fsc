<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

    <Target Name="TestAppConsole">
        <PropertyGroup>
            <ProjectDirectory>$(MSBuildThisFileDirectory)TestAppConsole</ProjectDirectory>
        </PropertyGroup>

        <RemoveDir Directories="$(ProjectDirectory)\bin; $(ProjectDirectory)\obj" /> 
        <Exec Command="dotnet restore" WorkingDirectory="$(ProjectDirectory)" />
        <Exec Command="dotnet build" WorkingDirectory="$(ProjectDirectory)" />
        <Exec Command="dotnet run" WorkingDirectory="$(ProjectDirectory)" ConsoleToMSBuild="true">
            <Output TaskParameter="ConsoleOutput" PropertyName="OutputOfExec" />
        </Exec>
        <Error
            Text="Expected 'Hello World from F#!' but was '$(OutputOfExec)'"
            Condition="! $(OutputOfExec.Contains('Hello World from F#!'))" />
    </Target>

    <Target Name="TestApp">
        <PropertyGroup>
            <ProjectDirectory>$(MSBuildThisFileDirectory)TestApp</ProjectDirectory>
        </PropertyGroup>

        <RemoveDir Directories="$(ProjectDirectory)\bin; $(ProjectDirectory)\obj" /> 
        <Exec Command="dotnet restore" WorkingDirectory="$(ProjectDirectory)" />
        <Exec Command="dotnet build" WorkingDirectory="$(ProjectDirectory)" />
        <Exec Command="dotnet run" WorkingDirectory="$(ProjectDirectory)" ConsoleToMSBuild="true">
            <Output TaskParameter="ConsoleOutput" PropertyName="OutputOfExec" />
        </Exec>
        <Error
            Text="Expected 'This string came from the test library!' but was '$(OutputOfExec)'"
            Condition="! $(OutputOfExec.Contains('This string came from the test library!'))" />
        <!--<Exec Command="dotnet pack" WorkingDirectory="$(ProjectDirectory)" />-->
    </Target>

    <Target Name="TestAppConsoleNet451">
        <PropertyGroup>
            <ProjectDirectory>$(MSBuildThisFileDirectory)TestAppConsoleNet451</ProjectDirectory>
        </PropertyGroup>

        <RemoveDir Directories="$(ProjectDirectory)\bin; $(ProjectDirectory)\obj" /> 
        <Exec Command="dotnet restore" WorkingDirectory="$(ProjectDirectory)" />
        <Exec Command="dotnet build" WorkingDirectory="$(ProjectDirectory)" />
        <Exec Command="dotnet run" WorkingDirectory="$(ProjectDirectory)" ConsoleToMSBuild="true">
            <Output TaskParameter="ConsoleOutput" PropertyName="OutputOfExec" />
        </Exec>
        <Error
            Text="Expected 'Hello World from F#!' but was '$(OutputOfExec)'"
            Condition="! $(OutputOfExec.Contains('Hello World from F#!'))" />
    </Target>

    <Target Name="TestAppConsoleCrossGen">
        <PropertyGroup>
            <ProjectDirectory>$(MSBuildThisFileDirectory)TestAppConsoleCrossGen</ProjectDirectory>
        </PropertyGroup>

        <RemoveDir Directories="$(ProjectDirectory)\bin; $(ProjectDirectory)\obj" /> 
        <Exec Command="dotnet restore" WorkingDirectory="$(ProjectDirectory)" />
        <Exec Command="dotnet build -r win7-x64" WorkingDirectory="$(ProjectDirectory)" />
        <Exec Command="dotnet run -f netcoreapp1.0" WorkingDirectory="$(ProjectDirectory)" ConsoleToMSBuild="true">
            <Output TaskParameter="ConsoleOutput" PropertyName="OutputOfExec" />
        </Exec>
        <Error
            Text="Expected 'Hello World from F#! using netcoreapp1.0' but was '$(OutputOfExec)'"
            Condition="! $(OutputOfExec.Contains('Hello World from F#! using netcoreapp1.0'))" />
        <!-- dotnet run -f net451 raise error about RuntimeIdentifier property not set -->
        <Exec Command="bin\Debug\net451\TestAppConsole.exe" WorkingDirectory="$(ProjectDirectory)" ConsoleToMSBuild="true">
            <Output TaskParameter="ConsoleOutput" PropertyName="OutputOfExec" />
        </Exec>
        <Error
            Text="Expected 'Hello World from F#! using net451' but was '$(OutputOfExec)'"
            Condition="! $(OutputOfExec.Contains('Hello World from F#! using net451'))" />
        <!-- dotnet pack raise error about RuntimeIdentifier property not set -->
        <Exec Command="dotnet pack /p:RuntimeIdentifier=win7-x64" WorkingDirectory="$(ProjectDirectory)" />
    </Target>

    <Target Name="TestLibrary">
        <PropertyGroup>
            <ProjectDirectory>$(MSBuildThisFileDirectory)TestLibrary</ProjectDirectory>
        </PropertyGroup>

        <RemoveDir Directories="$(ProjectDirectory)\bin; $(ProjectDirectory)\obj" /> 
        <Exec Command="dotnet restore" WorkingDirectory="$(ProjectDirectory)" />
        <Exec Command="dotnet pack" WorkingDirectory="$(ProjectDirectory)" />
    </Target>

    <Target Name="TestLibraryOutOfTree">
        <PropertyGroup>
            <OutOfTreeDirectory>$(MSBuildThisFileDirectory)</OutOfTreeDirectory>
            <ProjectDirectory>$(MSBuildThisFileDirectory)TestLibrary</ProjectDirectory>
            <ProjectPath>"$(ProjectDirectory)\TestLibrary.fsproj"</ProjectPath>
        </PropertyGroup>

        <RemoveDir Directories="$(ProjectDirectory)\bin; $(ProjectDirectory)\obj" />
        <Exec Command="dotnet restore $(ProjectPath)" WorkingDirectory="$(OutOfTreeDirectory)" />
        <Exec Command="dotnet build $(ProjectPath)" WorkingDirectory="$(OutOfTreeDirectory)" />
        <Exec Command="dotnet pack $(ProjectPath)" WorkingDirectory="$(OutOfTreeDirectory)" />
    </Target>


    <Target Name="TestMultipleLibraryInSameDir">
        <PropertyGroup>
            <ProjectDirectory>$(MSBuildThisFileDirectory)TestMultipleLibraryInSameDir</ProjectDirectory>
            <Project1FileName>Test1Library.fsproj</Project1FileName>
            <Project2FileName>Test2Library.fsproj</Project2FileName>
        </PropertyGroup>

        <RemoveDir Directories="$(ProjectDirectory)\bin; $(ProjectDirectory)\obj" />
        <Exec Command="dotnet restore $(Project1FileName)" WorkingDirectory="$(ProjectDirectory)" />
        <Exec Command="dotnet build $(Project1FileName)" WorkingDirectory="$(ProjectDirectory)" />
        <Exec Command="dotnet pack $(Project1FileName)" WorkingDirectory="$(ProjectDirectory)" />
        <Exec Command="dotnet restore $(Project2FileName)" WorkingDirectory="$(ProjectDirectory)" />
        <Exec Command="dotnet build $(Project2FileName)" WorkingDirectory="$(ProjectDirectory)" />
        <Exec Command="dotnet pack $(Project2FileName)" WorkingDirectory="$(ProjectDirectory)" />
    </Target>

    <Target Name="TestLibraryCrossGen">
        <PropertyGroup>
            <ProjectDirectory>$(MSBuildThisFileDirectory)TestLibraryCrossGen</ProjectDirectory>
        </PropertyGroup>

        <RemoveDir Directories="$(ProjectDirectory)\bin; $(ProjectDirectory)\obj" /> 
        <Exec Command="dotnet restore" WorkingDirectory="$(ProjectDirectory)" />
        <Exec Command="dotnet pack" WorkingDirectory="$(ProjectDirectory)" />
    </Target>

    <Target Name="TestXunit">
        <PropertyGroup>
            <ProjectDirectory>$(MSBuildThisFileDirectory)TestXunit</ProjectDirectory>
        </PropertyGroup>

        <RemoveDir Directories="$(ProjectDirectory)\bin; $(ProjectDirectory)\obj" />
        <Exec Command="dotnet restore" WorkingDirectory="$(ProjectDirectory)" />
        <Exec Command="dotnet test" WorkingDirectory="$(ProjectDirectory)" />
    </Target>

    <Target Name="SmokeTestExamplesPreview3">

        <PropertyGroup>
            <ProjectDirectory>$(MSBuildThisFileDirectory)..\examples\preview3\console</ProjectDirectory>
        </PropertyGroup>

        <RemoveDir Directories="$(ProjectDirectory)\bin; $(ProjectDirectory)\obj" /> 
        <Exec Command="dotnet restore" WorkingDirectory="$(ProjectDirectory)" />
        <Exec Command="dotnet build" WorkingDirectory="$(ProjectDirectory)" />
        <Exec Command="dotnet run" WorkingDirectory="$(ProjectDirectory)" />

        <PropertyGroup>
            <ProjectDirectory>$(MSBuildThisFileDirectory)..\examples\preview3\lib</ProjectDirectory>
        </PropertyGroup>

        <RemoveDir Directories="$(ProjectDirectory)\bin; $(ProjectDirectory)\obj" /> 
        <Exec Command="dotnet restore" WorkingDirectory="$(ProjectDirectory)" />
        <Exec Command="dotnet build" WorkingDirectory="$(ProjectDirectory)" />
        <Exec Command="dotnet pack" WorkingDirectory="$(ProjectDirectory)" />

        <PropertyGroup>
            <ProjectDirectory>$(MSBuildThisFileDirectory)..\examples\preview3\console-crossgen</ProjectDirectory>
        </PropertyGroup>

        <RemoveDir Directories="$(ProjectDirectory)\bin; $(ProjectDirectory)\obj" /> 
        <Exec Command="dotnet restore" WorkingDirectory="$(ProjectDirectory)"  Condition=" '$(OS)' == 'Windows_NT' " />
        <Exec Command="dotnet build -r win7-x64" WorkingDirectory="$(ProjectDirectory)"  Condition=" '$(OS)' == 'Windows_NT' " />
        <Exec Command="dotnet run -f netcoreapp1.0" WorkingDirectory="$(ProjectDirectory)"  Condition=" '$(OS)' == 'Windows_NT' " />
        <Exec Command="dotnet pack /p:RuntimeIdentifier=win7-x64" WorkingDirectory="$(ProjectDirectory)"  Condition=" '$(OS)' == 'Windows_NT' " />

        <PropertyGroup>
            <ProjectDirectory>$(MSBuildThisFileDirectory)..\examples\preview3\xunit</ProjectDirectory>
        </PropertyGroup>

        <RemoveDir Directories="$(ProjectDirectory)\bin; $(ProjectDirectory)\obj" /> 
        <Exec Command="dotnet restore" WorkingDirectory="$(ProjectDirectory)" />
        <Exec Command="dotnet test" WorkingDirectory="$(ProjectDirectory)" />

        <PropertyGroup>
            <ProjectDirectory>$(MSBuildThisFileDirectory)..\examples\preview3\mstest</ProjectDirectory>
        </PropertyGroup>

        <RemoveDir Directories="$(ProjectDirectory)\bin; $(ProjectDirectory)\obj" /> 
        <Exec Command="dotnet restore" WorkingDirectory="$(ProjectDirectory)" />
        <Exec Command="dotnet test" WorkingDirectory="$(ProjectDirectory)" />

        <PropertyGroup>
            <ProjectDirectory>$(MSBuildThisFileDirectory)..\examples\preview3\web</ProjectDirectory>
        </PropertyGroup>

        <RemoveDir Directories="$(ProjectDirectory)\bin; $(ProjectDirectory)\obj" /> 
        <Exec Command="dotnet restore" WorkingDirectory="$(ProjectDirectory)" />
        <Exec Command="dotnet build" WorkingDirectory="$(ProjectDirectory)" />
    </Target>

    <ItemGroup>
        <AllTests Include="TestAppConsole" />
        <AllTests Include="TestApp" />
        <AllTests Include="TestAppConsoleNet451" Condition=" '$(OS)' == 'Windows_NT' " />
        <AllTests Include="TestLibrary" />
        <AllTests Include="TestLibraryCrossGen" Condition=" '$(OS)' == 'Windows_NT' " />
        <AllTests Include="TestAppConsoleCrossGen" Condition=" '$(OS)' == 'Windows_NT' " />
        <AllTests Include="TestXunit" />
        <AllTests Include="SmokeTestExamplesPreview3" />
    </ItemGroup>

    <ItemGroup>
        <FailingTests Include="TestMultipleLibraryInSameDir" />
    </ItemGroup>

    <Target Name="PrepareTests">
        <MakeDir Directories="$(ProjectDirectory)src\FSharp.NET.Sdk\bin\Debug" />
    </Target>

    <Target Name="Test" DependsOnTargets="PrepareTests; @(AllTests)" />

    <Target Name="FailingTest" DependsOnTargets="PrepareTests; @(FailingTests)" />

    <Target Name="TestSuiteInfo">
        <ItemGroup>
            <TestLI Include="@(AllTests -> '- %(Identity)%0A')" />
        </ItemGroup>
        <Message Importance="high" Text="Use '/t:Test' to run all tests" />
        <Message Importance="high" Text="or '/t:TestName' to run a specific test" />
        <Message Importance="high" Text="Tests avaiable:%0A @(TestLI,' ')" />
    </Target>

</Project>